service:
  name: BoBot

# Add the serverless-webpack plugin
provider:
  name: aws
  stage: dev
  runtime: nodejs8.10

  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "states:StartExecution"
      Resource:
        - "*"

  region: us-east-1

  environment:
    SLACK_WEBHOOK_URL: "https://hooks.slack.com/services/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"
    SLACK_TOKEN: "xoxp-552776779697-552600781808-553385325779-0a607c73986452b65cceec7a8b19344d"

    # custom:
    #  webpack:
    #    webpackConfig: './webpack.config.js'   # Name of webpack configuration file
    #    includeModules: true   # Node modules configuration for packaging
    #    packager: 'npm'

functions:
  startBoba:
    handler: handler.startBoba
    events:
      - http:
          path: start-boba
          method: post
    environment:
      TIMER_ARN: ${self:resources.Outputs.Timer.Value}
      POLLER_ARN: ${self:resources.Outputs.Poller.Value}
  sendNotification:
    handler: handler.sendNotification
  checkLink:
    handler: handler.checkLink


stepFunctions:
  stateMachines:
    timer:
      name: timer
      definition:
        StartAt: wait
        States: 
          wait: 
            Type: Wait
            TimestampPath: "$.timestamp"
            Next: notify
          notify: 
            Type: Task
            Resource: "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-sendNotification"
            Parameters: 
              text: "Time for checkout!"
            End: true
    poller:
      name: poller
      definition:
        StartAt: poll
        States:
          poll:
            Type: Task
            Resource: "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-checkLink"
            Next: check-result
          check-result:
            Type: Choice
            Choices:
              - Variable: "$.didCheckout"
                NumericEquals: 1
                Next: notify
            Default: wait
          wait:
            Type: Wait
            Seconds: 60
            Next: poll
          notify:
            Type: Task
            Resource: "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-sendNotification"
            Parameters: 
              text: "Checkout complete, time to pay!"
            End: True




#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
resources:
  Resources:
  Outputs:
    Timer:
      Description: The ARN of the checkout reminder
      Value:
        Ref: Timer
    Poller:
      Description: The ARN of the doordash poller
      Value:
        Ref: Poller

plugins:
  - serverless-offline
  - serverless-webpack
  - serverless-step-functions
  - serverless-pseudo-parameters
